// Copyright 2024 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#![allow(unused_doc_comments)]
#![no_main]

use alloy_primitives::Address;
use common::output::Output;
use common::serializable_g1::SerializableG1;
use common::verify_blob::IVerifyBlob;
use risc0_steel::{ethereum::EthEvmInput, Contract};
use risc0_zkvm::guest::env;
use rust_kzg_bn254_primitives::{blob::Blob, helpers::{compute_challenge, evaluate_polynomial_in_evaluation_form}};
use rust_kzg_bn254_verifier::verify::verify_proof;
use tiny_keccak::{Hasher, Keccak};
use ark_bn254::Fr;
use ark_serialize::CanonicalSerialize;
use rust_eigenda_v2_common::{EigenDACert, Payload, PayloadForm};

risc0_zkvm::guest::entry!(main);

fn keccak256(data: &[u8]) -> [u8; 32] {
    let mut hasher = Keccak::v256();
    let mut output = [0u8; 32];
    hasher.update(data);
    hasher.finalize(&mut output);
    output
}

/// Evaluates the polynomial at the given point using Horner evaluation.
pub fn eval(coeffs: &[Fr], point: Fr) -> Fr {
    let mut val = Fr::from(0);
    for coef in coeffs.into_iter().rev() {
        val = val * point + coef;
    }
    val
}

/// This guest proves that an EigenDA Cert (BlobInfo) is valid, as well as that
/// the cert's commitment corresponds to a given blob.
/// It uses the risc0 Steel library to prove the cert validity via an eth_call on the BlobVerifierWrapper.
/// It receives serialized blob_info from the host, which it uses as arguments to the eth_call.
/// Then it verifies that the received blob (data) commits to the same commitment as found in the blob_info
/// It also computes the keccak256 hash of the blob data, which is used as a public output.
/// This is done to later compare on EigenDAL1DAValidator against the calculated hashes
fn main() {
    // Read the input from the guest environment.
    let input: EthEvmInput = env::read();
    // aka EigenDACert
    let eigenda_cert: EigenDACert = env::read();
    // Raw bytes dispersed by zksync's sequencer to EigenDA
    let data: Vec<u8> = env::read();
    // Proof that the given commitment commits to the blob
    let proof: SerializableG1 = env::read();
    // Address that is used to call the VerifyDACertV2 function
    let cert_verifier_wrapper_addr: Address = env::read();

    let payload = Payload::new(data.clone());
    let blob = Blob::new(&payload.to_blob(PayloadForm::Coeff).unwrap().serialize()); // todo payload form input

    // Converts the input into a `EvmEnv` for execution.
    let env = input.into_env();

    // Execute the view call; it returns the result in the type generated by the `sol!` macro.
    let contract = Contract::new(cert_verifier_wrapper_addr, &env);
    let call = IVerifyBlob::verifyDACertV2Call {
        batchHeader: eigenda_cert.batch_header.clone().into(),
        blobInclusionInfo: eigenda_cert.blob_inclusion_info.clone().into(),
        nonSignerStakesAndSignature: eigenda_cert.non_signer_stakes_and_signature.clone().into(),
        signedQuorumNumbers: eigenda_cert.signed_quorum_numbers.clone().into(),
    };
    let returns = contract.call_builder(&call).call();
    // Here we assert that the result of the verifyDACertV2 call is true, meaning it executed correctly
    assert!(returns._0);

    // Calculate the polynomial in evaluation form
    let poly_coeff = blob.to_polynomial_coeff_form();
    let poly_eval = poly_coeff.to_eval_form().unwrap();

    // Get the commitment from eigenda cert
    let cert_commitment = eigenda_cert.blob_inclusion_info.blob_certificate.blob_header.commitment.commitment;
    // Compute evaluation challenge
    let evaluation_challenge = compute_challenge(&blob, &cert_commitment).unwrap();

    // Evaluate the polynomial at the evaluation challenge
    let y = evaluate_polynomial_in_evaluation_form(&poly_eval, &evaluation_challenge).unwrap();

    let evaled_y = eval(poly_coeff.coeffs(), evaluation_challenge);

    // Assert that the evaluation of the polynomial at the evaluation challenge is equal to the y value
    assert_eq!(y, evaled_y);

    // Verification of the kzg proof for the given commitment, evaluation and evaluation challenge
    let verified = verify_proof(cert_commitment, proof.g1, y, evaluation_challenge).unwrap();
    assert!(verified);

    // Here we calculate the keccak hash of the data, which we will use on zksync's EigenDAL1Validator to compare it to the hashes there
    let hash = keccak256(&data);

    let mut proof_bytes = vec![];
    proof.g1.serialize_compressed(&mut proof_bytes).unwrap();
    // Public outputs of the guest, eigenDAHash, commitment to the risc0 steel environment, blob info and proof, they are embedded on the risc0 proof
    let output = Output {
        hash: hash.to_vec(),
        env_commitment: env.commitment().abi_encode(),
        inclusion_data: eigenda_cert.to_bytes().unwrap(),
        proof: proof_bytes,
    };

    env::commit(&output);
}
