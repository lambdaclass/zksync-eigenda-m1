use ethers::{prelude::*, utils::Ganache};
use std::process::Command;
use std::fs;
use std::path::Path;
use std::sync::Arc;
use std::str::FromStr;

const ABI: &str = r#"
[{"inputs":[{"internalType":"address","name":"_blobVerifier","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"blobVerifier","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"components":[{"internalType":"uint256","name":"x","type":"uint256"},{"internalType":"uint256","name":"y","type":"uint256"}],"internalType":"struct G1Point","name":"commitment","type":"tuple"},{"internalType":"uint32","name":"dataLength","type":"uint32"},{"components":[{"internalType":"uint8","name":"quorumNumber","type":"uint8"},{"internalType":"uint8","name":"adversaryThresholdPercentage","type":"uint8"},{"internalType":"uint8","name":"confirmationThresholdPercentage","type":"uint8"},{"internalType":"uint32","name":"chunkLength","type":"uint32"}],"internalType":"struct QuorumBlobParam[]","name":"quorumBlobParams","type":"tuple[]"}],"internalType":"struct BlobHeader","name":"blobHeader","type":"tuple"},{"components":[{"internalType":"uint32","name":"batchId","type":"uint32"},{"internalType":"uint32","name":"blobIndex","type":"uint32"},{"components":[{"components":[{"internalType":"bytes32","name":"blobHeadersRoot","type":"bytes32"},{"internalType":"bytes","name":"quorumNumbers","type":"bytes"},{"internalType":"bytes","name":"signedStakeForQuorums","type":"bytes"},{"internalType":"uint32","name":"referenceBlockNumber","type":"uint32"}],"internalType":"struct BatchHeader","name":"batchHeader","type":"tuple"},{"internalType":"bytes32","name":"signatoryRecordHash","type":"bytes32"},{"internalType":"uint32","name":"confirmationBlockNumber","type":"uint32"}],"internalType":"struct BatchMetadata","name":"batchMetadata","type":"tuple"},{"internalType":"bytes","name":"inclusionProof","type":"bytes"},{"internalType":"bytes","name":"quorumIndices","type":"bytes"}],"internalType":"struct BlobVerificationProof","name":"blobVerificationProof","type":"tuple"}],"name":"verifyBlobV1","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}]
"#;

const BYTECODE: &str = "608060405234801561000f575f5ffd5b50604051610a3c380380610a3c833981810160405281019061003191906100d4565b805f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100ff565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100a38261007a565b9050919050565b6100b381610099565b81146100bd575f5ffd5b50565b5f815190506100ce816100aa565b92915050565b5f602082840312156100e9576100e8610076565b5b5f6100f6848285016100c0565b91505092915050565b6109308061010c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610034575f3560e01c806375b033ed146100385780638d67b90914610056575b5f5ffd5b610040610086565b60405161004d919061017b565b60405180910390f35b610070600480360381019061006b91906101dc565b6100aa565b60405161007d919061026c565b60405180910390f35b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638d67b90984846040518363ffffffff1660e01b81526004016101069291906108c5565b5f6040518083038186803b15801561011c575f5ffd5b505afa15801561012e573d5f5f3e3d5ffd5b505050506001905092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6101658261013c565b9050919050565b6101758161015b565b82525050565b5f60208201905061018e5f83018461016c565b92915050565b5f5ffd5b5f5ffd5b5f5ffd5b5f608082840312156101b5576101b461019c565b5b81905092915050565b5f60a082840312156101d3576101d261019c565b5b81905092915050565b5f5f604083850312156101f2576101f1610194565b5b5f83013567ffffffffffffffff81111561020f5761020e610198565b5b61021b858286016101a0565b925050602083013567ffffffffffffffff81111561023c5761023b610198565b5b610248858286016101be565b9150509250929050565b5f8115159050919050565b61026681610252565b82525050565b5f60208201905061027f5f83018461025d565b92915050565b5f82905092915050565b5f819050919050565b6102a18161028f565b81146102ab575f5ffd5b50565b5f813590506102bc81610298565b92915050565b5f6102d060208401846102ae565b905092915050565b6102e18161028f565b82525050565b604082016102f75f8301836102c2565b6103035f8501826102d8565b5061031160208301836102c2565b61031e60208501826102d8565b50505050565b5f63ffffffff82169050919050565b61033c81610324565b8114610346575f5ffd5b50565b5f8135905061035781610333565b92915050565b5f61036b6020840184610349565b905092915050565b61037c81610324565b82525050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f833560016020038436030381126103aa576103a961038a565b5b83810192508235915060208301925067ffffffffffffffff8211156103d2576103d1610382565b5b6080820236038313156103e8576103e7610386565b5b509250929050565b5f82825260208201905092915050565b5f819050919050565b5f60ff82169050919050565b61041e81610409565b8114610428575f5ffd5b50565b5f8135905061043981610415565b92915050565b5f61044d602084018461042b565b905092915050565b61045e81610409565b82525050565b608082016104745f83018361043f565b6104805f850182610455565b5061048e602083018361043f565b61049b6020850182610455565b506104a9604083018361043f565b6104b66040850182610455565b506104c4606083018361035d565b6104d16060850182610373565b50505050565b5f6104e28383610464565b60808301905092915050565b5f82905092915050565b5f608082019050919050565b5f61050f83856103f0565b935061051a82610400565b805f5b858110156105525761052f82846104ee565b61053988826104d7565b9750610544836104f8565b92505060018101905061051d565b5085925050509392505050565b5f608083016105705f840184610285565b61057c5f8601826102e7565b5061058a604084018461035d565b6105976040860182610373565b506105a5606084018461038e565b85830360608701526105b8838284610504565b925050508091505092915050565b5f823560016060038336030381126105e1576105e061038a565b5b82810191505092915050565b5f823560016080038336030381126106085761060761038a565b5b82810191505092915050565b5f819050919050565b61062681610614565b8114610630575f5ffd5b50565b5f813590506106418161061d565b92915050565b5f6106556020840184610633565b905092915050565b61066681610614565b82525050565b5f5f833560016020038436030381126106885761068761038a565b5b83810192508235915060208301925067ffffffffffffffff8211156106b0576106af610382565b5b6001820236038313156106c6576106c5610386565b5b509250929050565b5f82825260208201905092915050565b828183375f83830152505050565b5f601f19601f8301169050919050565b5f61070783856106ce565b93506107148385846106de565b61071d836106ec565b840190509392505050565b5f608083016107395f840184610647565b6107455f86018261065d565b50610753602084018461066c565b85830360208701526107668382846106fc565b92505050610777604084018461066c565b858303604087015261078a8382846106fc565b9250505061079b606084018461035d565b6107a86060860182610373565b508091505092915050565b5f606083016107c45f8401846105ed565b8482035f8601526107d58282610728565b9150506107e56020840184610647565b6107f2602086018261065d565b50610800604084018461035d565b61080d6040860182610373565b508091505092915050565b5f60a083016108295f84018461035d565b6108355f860182610373565b50610843602084018461035d565b6108506020860182610373565b5061085e60408401846105c6565b848203604086015261087082826107b3565b915050610880606084018461066c565b85830360608701526108938382846106fc565b925050506108a4608084018461066c565b85830360808701526108b78382846106fc565b925050508091505092915050565b5f6040820190508181035f8301526108dd818561055f565b905081810360208301526108f18184610818565b9050939250505056fea26469706673582212207f5cbba6a5123a5634ae3d33014ead0a105860397bd632baaf11360914fd7b2a64736f6c634300081c0033";

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Path to your Solidity contract
    let contract_path = "./src/VerifierWrapper.sol";
    
    // Parse the ABI
    let abi: ethers::abi::Abi = serde_json::from_str(ABI)?;

    // Convert the bytecode to Vec<u8>
    // Setup Ethereum provider and wallet
    let provider = Provider::<Http>::try_from("http://127.0.0.1:8545")?;
    let wallet: LocalWallet = "3eb15da85647edd9a1159a4a13b9e7c56877c4eb33f614546d4db06a51868b1c".parse()?;
    let client = Arc::new(SignerMiddleware::new(provider, wallet));

    // Deploy the contract
    let factory = ContractFactory::new(abi, ethers::types::Bytes::from_str(BYTECODE).unwrap(), client);
    let contract = factory.deploy(())?.send().await?;

    println!("Contract deployed at address: {}", contract.address());

    Ok(())
}

// Helper function to extract bytecode from solc output
fn extract_bytecode(output: &str) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
    let bytecode_line = output
        .lines()
        .find(|line| line.starts_with("Binary"))
        .ok_or("Bytecode not found")?;

    let bytecode = bytecode_line.split_whitespace().nth(1).ok_or("No bytecode found")?;
    let bytecode = hex::decode(bytecode)?;

    Ok(bytecode)
}

// Helper function to extract and parse ABI from solc output
fn extract_abi(output: &str) -> Result<ethers::abi::Abi, Box<dyn std::error::Error>> {
    let abi_line = output
        .lines()
        .find(|line| line.starts_with("ABI"))
        .ok_or("ABI not found")?;

    let abi_json = abi_line.split_whitespace().nth(1).ok_or("No ABI found")?;
    let abi: ethers::abi::Abi = serde_json::from_str(abi_json)?;

    Ok(abi)
}
