// Copyright 2024 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#![allow(unused_doc_comments)]
#![no_main]

use alloy_primitives::{address, Address};
use risc0_zkvm::guest::env;

use ark_bn254::{Fq, G1Affine};
use rust_kzg_bn254_primitives::blob::Blob;
use rust_kzg_bn254_prover::{kzg::KZG, srs::SRS};
use rust_kzg_bn254_verifier::verify::verify_blob_kzg_proof;
use ark_ff::PrimeField;
use ark_serialize::{CanonicalDeserialize, CanonicalSerialize};
use serde::{Deserialize, Deserializer};
use ark_ff::{Fp, MontFp};
use std::str::FromStr;

risc0_zkvm::guest::entry!(main);

pub struct SerializableG1 {
    pub g1: G1Affine
}

impl<'de> Deserialize<'de> for SerializableG1 {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let (x, y): (String, String) = Deserialize::deserialize(deserializer)?;
        let g1 = G1Affine::new_unchecked(Fp::from_str(&x).unwrap(), Fp::from_str(&y).unwrap());
        Ok(SerializableG1{g1})
    }
}

fn main() {

    println!("starting guest");

    let data: Vec<u8> = env::read();
    println!("data gotten");

    let blob = Blob::from_raw_data(&data);

    let eval_commitment: SerializableG1 = env::read();

    let proof: SerializableG1 = env::read();

    println!("blob done");

    let verified = verify_blob_kzg_proof(&blob, &eval_commitment.g1, &proof.g1).unwrap();
    
    println!("verified done");
    assert!(verified);

    env::commit(&verified);

    println!(":)");

    /* 
    // Read the input from the guest environment.
    let input: EthEvmInput = env::read();
    let blob_info: BlobInfo = env::read();

    // Converts the input into a `EvmEnv` for execution.
    let env = input.into_env();
    
    // Execute the view call; it returns the result in the type generated by the `sol!` macro.
    let contract = Contract::new(CONTRACT, &env);
    let call = IVerifyBlob::verifyBlobV1Call {
        blobHeader: blob_info.blob_header.into(),
        blobVerificationProof: blob_info.blob_verification_proof.into(),
    };
    let returns = contract.call_builder(&call).from(CALLER).call();
    println!("View call result: {}", returns._0);
    // Commit the block hash and number used when deriving `EvmEnv` to the journal.
    env::commit_slice(&env.commitment().abi_encode());*/
}
