// Copyright 2024 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#![allow(unused_doc_comments)]
#![no_main]

use alloy_primitives::{address, Address};
use risc0_zkvm::guest::env;

use ark_bn254::{Fq, G1Affine};
use rust_kzg_bn254_primitives::blob::Blob;
use rust_kzg_bn254_prover::{kzg::KZG, srs::SRS};
use rust_kzg_bn254_verifier::verify::verify_blob_kzg_proof;
use ark_ff::PrimeField;
use ark_serialize::{CanonicalDeserialize, CanonicalSerialize};
use serde::{Deserialize, Deserializer};
use ark_ff::{Fp, MontFp};
use std::str::FromStr;

risc0_zkvm::guest::entry!(main);

pub struct SerializableG1 {
    pub g1: G1Affine
}

impl<'de> Deserialize<'de> for SerializableG1 {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        let (x, y): (String, String) = Deserialize::deserialize(deserializer)?;
        let g1 = G1Affine::new_unchecked(Fp::from_str(&x).unwrap(), Fp::from_str(&y).unwrap());
        Ok(SerializableG1{g1})
    }
}

fn main() {

    println!("starting guest");

    let data: Vec<u8> = env::read();
    println!("data gotten");
    let g1s: Vec<SerializableG1> = env::read();
    println!("g1s gotten");
    let mut g1: Vec<G1Affine> = vec![];
    let mut i = 0;
    for g in g1s {
        println!("pushing {}",i);
        g1.push(g.g1);
        i += 1;
    }
    //let g1: Vec<G1Affine> = g1s.into_iter().map(|x| G1Affine::deserialize_compressed_unchecked(&x[..]).unwrap()).collect();
    println!("g1s converted");
    let order: u32 = env::read();
    println!("order read");

    let srs = SRS{g1,order};

    println!("env gotten");

    let blob = Blob::from_raw_data(&data);

    println!("blob done");

    let mut kzg = KZG::new();

    println!("kzg done");
    kzg.calculate_and_store_roots_of_unity(blob.len().try_into().unwrap()).unwrap();
    println!("roots");
    
    let x: Vec<u8> = vec![20, 153, 170, 133, 150, 17, 219, 215, 90, 29, 61, 41, 183, 105, 4, 139, 14, 161, 160, 7, 49, 89, 23, 57, 49, 52, 16, 175, 112, 57, 19, 50];
    let y: Vec<u8> =  vec![47, 50, 235, 25, 170, 240, 84, 149, 189, 33, 211, 171, 1, 250, 141, 124, 116, 49, 37, 211, 193, 146, 250, 255, 63, 16, 117, 92, 28, 237, 120, 166];
    
    let x_fq = Fq::from(num_bigint::BigUint::from_bytes_be(&x));
    println!("x done");
    let y_fq =  Fq::from(num_bigint::BigUint::from_bytes_be(&y));
    println!("y done");
    
    let commitment = G1Affine::new(x_fq, y_fq);
    println!("com done");
    let real_commitment = kzg.commit_coeff_form(&blob.to_polynomial_coeff_form(), &srs).unwrap();
    println!("real done");
    
    assert!(commitment == real_commitment);

    let eval_commitment = kzg.commit_eval_form(&blob.to_polynomial_eval_form(), &srs).unwrap();

    println!("eval done");

    let proof = kzg.compute_blob_proof(&blob, &eval_commitment, &srs).unwrap();
    println!("proof done");

    let verified = verify_blob_kzg_proof(&blob, &eval_commitment, &proof).unwrap();
    
    println!("verified done");
    assert!(verified);

    env::commit(&verified);

    println!(":)");

    /* 
    // Read the input from the guest environment.
    let input: EthEvmInput = env::read();
    let blob_info: BlobInfo = env::read();

    // Converts the input into a `EvmEnv` for execution.
    let env = input.into_env();
    
    // Execute the view call; it returns the result in the type generated by the `sol!` macro.
    let contract = Contract::new(CONTRACT, &env);
    let call = IVerifyBlob::verifyBlobV1Call {
        blobHeader: blob_info.blob_header.into(),
        blobVerificationProof: blob_info.blob_verification_proof.into(),
    };
    let returns = contract.call_builder(&call).from(CALLER).call();
    println!("View call result: {}", returns._0);
    // Commit the block hash and number used when deriving `EvmEnv` to the journal.
    env::commit_slice(&env.commitment().abi_encode());*/
}
